{"tagline":"Sandboxing apps from Pypi packages","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"### appypi: sandboxing apps from Pypi packages\r\n==========================================\r\n**appypi** is a terminal-based\r\n[Python Package Index](http://pypi.python.org/pypi) package manager.\r\nEach app installed through appypi is sandboxed in an individual virtualenv\r\nand usable from the user space. No root access is required to install an app.\r\nappypi in **NOT** a replacement for [pip](http://www.pip-installer.org/)\r\nor [easy_install](http://peak.telecommunity.com/DevCenter/EasyInstall).\r\nActually, it uses pip intensively to manage package installations.\r\n\r\nappypi creates launchers into the user ~/bin directory. These launchers mimic\r\nthe package behavior in terms of what commands can be called. For example,\r\nappypi will create a *django-admin.py* launcher when installing the\r\n[django](http://djangoproject.com/) package, and a *fab* launcher\r\nwhen installing the [Fabric](http://fabfile.org/) package.\r\nThis way, you can use the package as if it was installed with pip directly.\r\n\r\nappypi won't install a package if it finds it in your path already.\r\nIt is your duty to take care of these external installations before using appypi.\r\n\r\n\r\nInstalling a package:\r\n\r\n    $ appypi install django\r\n    Looking for django...\r\n    Found Django version 1.4.2\r\n    Installing...\r\n    Install successful!\r\n\r\nUpgrading a package:\r\n\r\n    $ appypi upgrade django\r\n    Upgrading: Django (1.3 => 1.4.2)\r\n\r\nRemoving a package:\r\n\r\n    $ appypi remove django\r\n    These packages will be REMOVED:\r\n\r\n        Django\r\n\r\n    Do you want to continue? [y/n]y\r\n    Package Django has been removed.\r\n\r\n\r\nBuild status on travis-ci.org\r\n-----------------------------\r\n[![Build Status](https://travis-ci.org/stephanepechard/appypi.png)](https://travis-ci.org/stephanepechard/appypi)\r\n\r\n","name":"Appypi","google":""}